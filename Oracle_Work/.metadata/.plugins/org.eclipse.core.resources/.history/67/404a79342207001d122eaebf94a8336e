/*
 * 북스 8장. 테이블 생성 수정 제거하기
 * 데이터 정의어 (DDL)
 *	1.create : db 객체 생성
 *	2.ALTER  : DB 객체 수정
 *  3.DROP   : DB 객체 삭제
 * 	4.RENAME : DB 이름 변경
 * 	5.TRUNCATE : DB 객체 내용 및 저장 공간 삭제
 */

/*
 * ★★  DELETE(DML:데이터 조작어)/ TRUNCATE, DROP(DDL:데이터 정의어) 명령어의 차이점
 (DELETE, TRUNCATE, DROP 명령어는 모두 삭제하는 명령어이지만 중요한 차이점이 있다.)
 
1. DELETE 명령어      : 데이터는 지워지지만 테이블 용량은 줄어 들지 않는다.
                                      원하는 데이터만 삭제할 수 있다.
                                      삭제 후 잘못 삭제한 것은 되돌릴 수 있다.(rollback)  

2. TRUNCATE  명령어 : 용량이 줄어 들고, index 등도 모두 삭제된다.
                                       테이블은 삭제하지는 않고, 데이터만 삭제한다.
                                       한꺼번에 다 지워야 한다. 
                                       삭제 후 절대 되돌릴 수 없다.   

3. DROP 명령어           : 테이블 전체를 삭제(테이블 공간과 객체를 삭제한다.)  
                                       삭제 후 절대 되돌릴 수 없다.  
 */


--1. 테이블 구조를 만드는 CREATE TABLE문(교재206p)
--테이블 생성하기 위해서는 테이블명 정의, 테이블을 구성하는 컬럼의 데이터 타입과 무결성 제약 조건 정의

--<'테이블명' 및 '컬럼명' 정의 규칙>
--문자(영어 대소문자)로 시작, 30자 이내
--문자(영어 대소문자), 숫자0~9, 특수문자(_ $ #)만 사용가능
--대소문자 구별없음, 소문자로 저장하려면 ''로 묶어줘야 함
--동일 사용자의 다른 객체의 이름과 중복X (예)SYSTEM이 만든 테이블명들은 다 달라야 함

--
--<서브 쿼리를 이용하여 다른 테이블로부터 복사하여 테이블 생성 방법>
--서브 쿼리문으로 부서 테이블의 구조와 데이터 복사 -> 새로운 테이블 생성
--create table 테이블명(컬럼명 명시O) : 지정한 컬럼수와 데이터 타입이 서브쿼리문의 검색된 컬럼과 일치
--create table 테이블명(컬럼명 명시X) : 서브쿼리의 컬럼명이 그대로 복사
--
--무결성 제약조건 : ★★ not NULL 조건만 복사,
--               기본키(=PK), 외래키(=FK)와 같은 무결성제약조건은 복사X
--               디폴트 옵션에서 정의한 값은 복사
--
--서브쿼리의 출력 결과가 테이블의 초기 데이터로 삽입됨
--(예) CREATE TABLE AS SELECT문
--CREATE TABLE 테이블명(컬럼명 명시 o)의 예
--문제, 서브쿼리문으로 부서 테이블의 구조와 데이터 복사하기(**제약조건은 복사안됨 -NOT NULL 조건만 복사)


SELECT DNO
FROM DEPARTMENT;


CREATE TABLE DEPT1(DEPT_ID) --컬럼수 1개
AS
SELECT DNO --컬럼수 1개
FROM DEPARTMENT;

SELECT * FROM DEPT1;
--RUN~ 에서 DEPT1의 테이블 구조 확인
DESC DEPT1;

/*
 * 2. CREATE TABLE 테이블명(컬럼명 명시X)의 예
 * 문제, 20번 부서의 소속 사원에 대한 정보를 포함한 DEPT2 테이블 생성하기
 * 서브쿼리문 내에 '산술식'에 대해 별칭 지정해야함(별칭 없으면 오류)
 */
DROP TABLE DEPT2;
CREATE TABLE DEPT2
AS select ENO, ENAME, SALARY * 12 AS "연봉" FROM EMPLOYEE WHERE DNO = '20';

SELECT * FROM DEPT2;

/*
 * 서브쿼리의 데이터는 복사하지 않고 테이블 구조만 복사 방법
 * 서브쿼리의 WHERE절을 항상 거짓이 되는 조건 지정 :
 * 조건에 맞는 데이터가 없으므로 구조만 복사됨
 */

CREATE TABLE DEPT3
AS SELECT * FROM DEPARTMENT
WHERE DNO = 0;
--RUN~에서 DEPT3의 테이블 구조 확인 => 데이터 타입만 복사(이때 제약조건은 복사 안됨)
--------------------------------------------------------------------------------

/*
 * 2. 테이블 구조를 변경하는 ALTER TABLE문
 * 2.1 컬럼 추가(=열 추가) : 추가된 열은 가장 마지막 위치에 생성
 * 
 * 문제, 사원테이블 DEPT2에 날짜 타입을 가진 BIRTH 열 추가
 */

ALTER TABLE DEPT2
ADD BIRTH DATE;

--이 테이블에 기존에 추가한 데이터가 있다면 추가한 열의 값은 NULL로 자동 입력됨
SELECT * FROM DEPT2;

/*
 * 문제, 사원테이블 DEPT2에 문자타입의 EMAIL 열 추가
 * (이때, 기존에 추가한 데이터(행)가 있다면 추가할 열(EMAIL)의 값은
 * 'TEST@TEST.COM'입력
 * ALTER TABLE table_name
 * ADD column_name type [DEFAULT default_value] [NOT NULL]
 */

ALTER TABLE DEPT2
ADD EMAIL VARCHAR2(50) DEFAULT 'TEST@TEST.COM' NOT NULL;

SELECT * FROM DEPT2;

/*
 * 2.2 열 데이터 타입 변경
 */
ALTER TABLE 테이블명
MODIFY 컬럼명 데이터타입 [DEFAULT 값]

/*
 * 기존 컬럼에 데이터가 없는 경우 : 컬럼 타입이나 크기 변경이 자유
 * (아직 INSERT한 ROW(레코드)가 없으므로 자유롭게 변경가능함)
 * 있는 경우 : 타입변경은 CHAR와 VARCHAR2만 허용하고
 * 변경할 컬럼의 크기가 저장된 데이터의 크기보다 같거나 클 경우에만
 * 
 * 
 * 문제, 테이블 DEPT2에서 사원이름의 컬럼크기를 변경
 */
ALTER TABLE DEPT2
MODIFY ENAME VARCHAR2(30);

/*
 * 문제 테이블 DEPT2에서 EMAIL의 컬럼크기를 변경 50 -> 40으로 작게 변경
 */

ALTER TABLE DEPT2
MODIFY EMAIL VARCHAR2(40);

/*
 * 문제, 테이블 DEPT2에서 EMAIL의 컬럼 타입을 변경
 */

ALTER TABLE DEPT2
MODIFY EMAIL CHAR(30);

ALTER TABLE DEPT2
MODIFY EMAIL NUMBER(30);
/*
 * 오류, 타입변경은 CHAR와 VARCHAR2만 가능
 * 만약, CHAR(30) -> NUMBER(30)로 변경해야하는 경우 : 해당 컬럼의 값을 모두 지우면 됨
 */

/*
 * 테이블 컬럼의 이름 변경
 */
ALTER TABLE 테이블명
RENAME COLUMN 기존컬럼명 TO 새컬럼명

ALTER TABLE DEPT2
RENAME COLUMN ENAME TO ENAME2;

SELECT * FROM DEPT2;

/*
 * 테이블 DEPT2에서 ENAME에 컬럼 기본값을 '기본'으로 지정
 */

ALTER TABLE DEPT2
MODIFY ENAME2 VARCHAR2(20) DEFAULT '기본' NOT NULL;

/*
 * 2.3 열삭제(=컬럼 삭제) : 2개 이상 컬럼이 존재하는 테이블에서만 열 삭제 가능
 * 
 * 문제, 테이블 DEPT2에서 사원 이름 제거
 */

ALTER TABLE DEPT2
DROP COLUMN ENAME2;

SELECT * FROM DEPT2;

ALTER TABLE DEPT2
ADD ENAME2 VARCHAR2(10);

DESC DEPT2;

/*
 * 2.4 SET UNUSED : 시스템의 요구가 적을 때 컬럼을 제거할 수 있도록 하나 이상의 컬럼을 UNUSED
 * 실제로 제거되지는 않음
 * 그래서 DROP 명령 실행으로 컬럼 제거하는것 보다 응답시간이 빨라짐
 * 
 * 데이터가 존재하는 경우에는 삭제된 것처럼 처리되기 때문에 SELECT절로 조회가 불가능함
 * DESC 문으로도 표시되지 않음
 * 
 * ALTER TABLE 테이블명
 * SET UNUSED(컬럼명)
 * 
 * 문제, 테이블 DEPT2에서 연봉을 UNUSED 상태로 만들기
 */

ALTER TABLE DEPT2
SET UNUSED("연봉");

SELECT * FROM DEPT2;
/*
 * SET UNUSED 사용하는 이유?
 * 1. 사용자에게 조회되지 않게 하기 위해
 * 2. UNUSED로 미사용 상태로 표시한 후 나중에 한꺼번에 DROP으로 제거하기 위해
 * 운영중에 컬럼을 삭제하는 것은 시간이 오래걸릴 수 있으므로 UNUSED로 표시해두고
 * 나중에 한꺼번에 DROP으로 제거
 */

/*
 * 문제, UNUSED로 표시된 모든 컬럼을 한번에 제거
 */

ALTER TABLE DEPT2
DROP UNUSED COLUMNS; --S : 복수

SELECT * FROM DEPT2;

/*
 * 제거 후 다시 같은 이름의 컬럼 추가 가능
 */
ALTER TABLE DEPT2
DROP COLUMN "연봉";

ALTER TABLE DEPT2
ADD "연봉" NUMBER DEFAULT 0;

ALTER TABLE DEPT2
ADD "연봉" NUMBER; 

SELECT * FROM DEPT2;

SELECT ENO, BIRTH, EMAIL, ENAME2, NVL("연봉",0)
FROM DEPT2;

/*
 * ------------------------------------------------------------------
 * 테이블 명 변경
 * 1. RENAME 이전테이블명 TO 새테이블명
 */
RENAME DEPT2 TO EMP;

/*
 * 2. ALTER TABLE 이전테이블명 RENAME TO 새테이블명;
 */
ALTER TABLE EMP RENAME TO EMP2;

/*
 * 테이블 삭제
 */
DROP TABLE 테이블명;










